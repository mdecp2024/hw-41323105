<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323105">https://github.com/mdecp2024/hw-41323105</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323105/content/About.html">https://mdecp2024.github.io/hw-41323105</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JoFWBFaeWQ8?si=Kb9eGnmd9_W2FNQK" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一:</p>
<p><span>請利用</span><a href="https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">程式一</a><span>的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ZuSatSj0dzY?si=7i6Ee2JbKN1I8Iij" title="YouTube video player" width="560"></iframe></p>
<p>題目二:</p>
<p><span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"</span><span>有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CHSqjW0flUE?si=Wlyaf2kQmtEmvicf" title="YouTube video player" width="560"></iframe></p>
<p> 題目三:</p>
<p><span> </span><a href="http://mde.tw/cp2024/content/Problem_set.html">http://mde.tw/cp2024/content/Problem_set.html</a><span> 中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/B53NBsjeweY?si=WctomtukmUJ-nJCD" title="YouTube video player" width="560"></iframe></p>
<h2>Exam234</h2>
<h3>w16_exam2</h3>
<p>座標(32,05)為頂點座標所繪製圖形之<a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/d91fbc3c5cc2c95ed737b9ba68227e1c/raw/bb0b66c50f37a08da85d9ec52c93fd79f6de9371/Exam2.py">程式碼</a></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!--啟動Brython-->
<p>
<script>
window.onload = function () {
    brython({ debug: 1, pythonpath: ['/static/', './../downloads/py/'] });
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"></pre>
</div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc
import math

# 建立畫布
canvas = html.CANVAS(width=1000, height=1000)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 定義左上角為原點，座標(32, 5)
x, y = 32, 5

# 畫 X 軸 (向右為正)
ctx.beginPath()
ctx.moveTo(32, 5)  # 從畫布左側
ctx.lineTo(82, 5)  # 畫到右側
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# 畫 Y 軸 (向下為正)
ctx.beginPath()
ctx.moveTo(32, 5)  # 從畫布頂部
ctx.lineTo(32, 55)  # 畫到底部
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# 標示 (32, 5)
ctx.beginPath()
ctx.arc(x, y, 5, 0, 2 * 3.14159)  # 畫一個半徑為5的圓
ctx.fillStyle = "black"
ctx.fill()

# 標示座標文字
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText(f"({x}, {y})", x + 10, y + 15)  # 在點旁顯示座標文字

# 外切圓的中心在(90,80)，半徑為40
center_x, center_y = 90,80
radius = 40
angle_offset = 0  # 六邊形的起始角度

# 計算六邊形的六個頂點
vertices = []
for i in range(6):
    angle = angle_offset + i * (2 * math.pi / 6)  # 每個頂點的角度，60度間隔
    x = center_x + radius * math.cos(angle)
    y = center_y + radius * math.sin(angle)
    vertices.append((x, y))

# 開始畫六邊形
ctx.beginPath()
ctx.moveTo(vertices[0][0], vertices[0][1])  # 開始於第一個頂點
for vertex in vertices[1:]:
    ctx.lineTo(vertex[0], vertex[1])  # 依次畫出各個邊
ctx.closePath()  # 關閉路徑

# 塗色
ctx.fillStyle = "gray"
ctx.fill()

# 畫菱形
diamond_center_x, diamond_center_y = 160,80
diamond_width = 40  # 菱形的寬度
diamond_height = 80  # 菱形的高度

diamond_vertices = [
    (diamond_center_x, diamond_center_y - diamond_height / 2),  # 上頂點
    (diamond_center_x + diamond_width / 2, diamond_center_y),  # 右頂點
    (diamond_center_x, diamond_center_y + diamond_height / 2),  # 下頂點
    (diamond_center_x - diamond_width / 2, diamond_center_y),  # 左頂點
]

# 開始畫菱形
ctx.beginPath()
ctx.moveTo(diamond_vertices[0][0], diamond_vertices[0][1])  # 開始於上頂點
for vertex in diamond_vertices[1:]:
    ctx.lineTo(vertex[0], vertex[1])  # 依次畫出各個邊
ctx.closePath()  # 關閉路徑

# 塗色
ctx.fillStyle = "lightgreen"
ctx.fill()

# 繪製三角形
ctx.fillStyle = 'orange'
ctx.beginPath()
ctx.moveTo(185,80) # 第一個頂點
ctx.lineTo(165,120) # 第二個頂點
ctx.lineTo(205,120) # 第三個頂點
ctx.closePath() # 封閉路徑
ctx.fill() # 填充三角形

# 畫圓
circle_center_x, circle_center_y = 250,80
circle_radius = 40

# 開始畫圓
ctx.beginPath()
ctx.arc(circle_center_x, circle_center_y, circle_radius, 0, 2 * math.pi)  # 圓心和半徑
ctx.closePath()

# 塗色
ctx.fillStyle = "lightcoral"
ctx.fill()

ctx.fillStyle = 'lightblue'
ctx.beginPath()
ctx.rect(300,40,80,80) # 填充正方形
ctx.fill()

ctx.fillStyle = 'lightpink'
ctx.beginPath()
ctx.rect(400,65,80,30) # 填充長方形
ctx.fill()
</script>
</p>
<p></p>
<p>Brython Maze</p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<div id="brython_div1"></div><h3>w16_exam3</h3>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p>
<script>
window.onload = function() {
    brython({debug: 1, pythonpath: ['/static/', './../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# Create the canvas with custom size for the maze
canvas = html.CANVAS(width=500, height=500)  # Set desired size for the maze
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

# Set the pixel size for the maze walls
pixel = 2

# Maze layout, drawn with pixel-sized lines
# Start drawing the maze using moveTo and lineTo

# Drawing a simple maze with blue walls
ctx.fillStyle = "blue"
ctx.beginPath()

# Example maze walls (these coordinates are just an example, you can adjust them to create your own maze layout)
# Top-left corner to right wall
ctx.moveTo(0, 0)
ctx.lineTo(200, 0)
ctx.lineTo(200, 200)
ctx.lineTo(0, 200)
ctx.lineTo(0, 0)

# Creating a simple path inside the maze
ctx.moveTo(50, 50)
ctx.lineTo(50, 150)
ctx.lineTo(150, 150)
ctx.lineTo(150, 50)

# Draw the maze
ctx.lineWidth = pixel
ctx.strokeStyle = "blue"
ctx.stroke()

</pre>
</div><h3>w16_exam4</h3><h2>w11_hw</h2>
<p>題目一:</p>
<p><span>已知可以用 Python 程式</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a><span>, 或</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a><span>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. </span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/840d945ea70360f88bd120545de61731/raw/54c0e3cac62e3f0befbbe723e588afa9d95a572a/gistfile1.txt">程式碼題目一</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XSV0QIoKrLA?si=SJCbKnzuEgy7n2je" title="YouTube video player" width="560"></iframe></p>
<p>心得:利用ChatGPT查詢運用"*" 如何運用<span>字元列印出圓型區域，在進入Brython進行排列組合之操作實證出結論，也讓我更加認知ChatGPT的運用方式及運用範圍如此廣大。</span></p>
<p></p>
<p></p>
<p>題目二:</p>
<p>已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/361c20d173b17494cbc9f737385b919b/raw/1a82e691313dce22df2352d703572befb1c4748d/gistfile1.txt">程式碼題目二</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/LlRakacCNUM?si=Ws2miIapBNt_7byP" title="YouTube video player" width="560"></iframe></p>
<p><span>心得:運用ChatGPT查詢如何利用黑色方塊圍出一個圓形區域</span></p>
<p><img alt="" src="/images/index.html"/><img alt="" height="129" src="/images/螢幕擷取畫面 2024-11-28 152348.png" width="130"/></p>
<h2>w12_hw</h2>
<p><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 。</span></p>
<p>04_list_append_remove <img alt="cool" height="11" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-cool.gif" width="11"/></p>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/3d9eb31e8936cdd989c541a058914e8e/raw/2ec701fe1257faf6fdab0ee904ac9d9a1b5c9c71/gistfile1.txt">程式碼-04</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化設定一個包含 "carrots"、"chocolate"和 "olives"的購物清單
shopping_list = ["carrots", "chocolate", "olives"]

# 顯示當前的購物清單
print(shopping_list)

# 使用 input() 函式讓用戶輸入要購買的物品
new_item = input("What else do I have to buy?")

# 檢查用戶輸入的物品是否已經在購物清單中
if new_item in shopping_list:
# 如果物品已經在清單中，顯示提示訊息
print(new_item + " is/are already in the shopping list")
# 顯示目前的購物清單
print(shopping_list)
else:
# 如果物品不在清單中，將其添加到清單中
shopping_list.append(new_item)
# 顯示更新後的購物清單
print(shopping_list)
# 問用戶是否要移除某個物品
item_to_remove = input("What do I have to remove?")

# 檢查用戶輸入的物品是否在購物清單中
if item_to_remove in shopping_list:
# 如果該物品在清單中，將其從清單中移除
shopping_list.remove(item_to_remove)
# 顯示移除後的購物清單
print(shopping_list)
else:
# 如果該物品不在清單中，顯示提示訊息
print(item_to_remove + " is/are not in the list")
# 顯示仍然保留的購物清單
print(shopping_list)</pre>
<p>心得:這程式可主要由.append()新增和.remove()刪除來呈現出購買清單的增減，再運用print()去輸入及更新資訊。</p>
<p></p>
<p>05_list_index_pop_insert</p>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/409c23feaec3f91585c27a6e2a5dedf3/raw/d066c0acf7be43e5d6078903373dc34d0938a772/gistfile1.txt">程式碼-05</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義當日的菜單，包含三個項目
todays_menu = ["burger", "salad", "coke"]
# 顯示原始菜單
print(todays_menu)

# 找出 "salad" 的索引位置
side_dish_index = todays_menu.index("salad")
# 顯示出 "salad" 的索引位置
print(side_dish_index)

# 根據索引 "salad" 從菜單中刪除
todays_menu.pop(side_dish_index)
# 顯示刪除 "salad" 後的菜單
print(todays_menu)

# 在原來的索引位置插入新的配菜 "fries"
todays_menu.insert(side_dish_index, "fries")
# 顯示更新後的菜單
print(todays_menu)</pre>
<p>心得:</p>
<p></p>
<p>06_list_slicing.ipynb</p>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/d1e8d5a29aad174c4a304ce8f42c8864/raw/8ce2dc4ad8cce68e0e6dfe52eb2602033498b490/gistfile1.txt">程式碼-06</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義出城市列表
cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]

# 顯示完整的城市列表
print(cities)

# 顯示列表中索引為 1 的城市（第二個城市）
print(cities[1]) # 輸出: "Prague"

# 顯示索引 1 到 3（不包括索引 4）的城市
print(cities[1:4]) # 輸出: ["Prague", "Cape Town", "Tokyo"]

# 顯示索引 1 到 3 的城市，間隔 2（步長為 2）
print(cities[1:4:2]) # 輸出: ["Prague", "Tokyo"]

# 顯示索引 0 到 2（不包括索引 3）的城市
print(cities[0:3]) # 輸出: ["San Diego", "Prague", "Cape Town"]

# 顯示從起始到索引 2（不包括索引 3）的城市，省略起始索引
print(cities[:3]) # 輸出: ["San Diego", "Prague", "Cape Town"]

# 顯示索引 2 到 4（不包括索引 5）的城市
print(cities[2:5]) # 輸出: ["Cape Town", "Tokyo", "Melbourne"]

# 顯示從索引 2 到結尾的城市
print(cities[2:]) # 輸出: ["Cape Town", "Tokyo", "Melbourne"]

# 顯示索引 0 到 4（不包括索引 5）的城市，間隔 2（步長為 2）
print(cities[0:5:2]) # 輸出: ["San Diego", "Cape Town", "Melbourne"]

# 顯示整個列表，間隔 2（步長為 2）
print(cities[::2]) # 輸出: ["San Diego", "Cape Town", "Melbourne"]

# 顯示索引為 4 的城市（最後一個城市）
print(cities[4]) # 輸出: "Melbourne"

# 使用負索引顯示最後一個城市
print(cities[-1]) # 輸出: "Melbourne"

# 使用負索引顯示索引 -4 到 -1（不包括索引 -1）的城市
print(cities[-4:-1]) # 輸出: ["Prague", "Cape Town", "Tokyo"]

# 逆向切片：顯示索引 3 到 1 的城市，按逆序排列
print(cities[3:0:-1]) # 輸出: ["Tokyo", "Cape Town", "Prague"]

# 使用負索引逆向切片：顯示索引 -2 到 -5 的城市，按逆序排列
print(cities[-2:-5:-1]) # 輸出: ["Tokyo", "Cape Town", "Prague"]

# 使用步長 -1 顯示整個列表，按逆序排列
print(cities[::-1]) # 輸出: ["Melbourne", "Tokyo", "Cape Town", "Prague", "San Diego"]</pre>
<p><span>說明:這範例程式在說明了索引存取與切篇操作的運用，</span><span>索引存取單一元素，</span><span>切片選擇多個元素，</span><span>使用步長調整選擇模式（正向或逆向），</span><span>省略部分參數進行靈活操作。</span></p>
<h2>w13_hw</h2>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/3e930a7222a9e88b4a15bd9285fb4ca8/raw/1ae7a58fa1d675d62fd1cca864b3891b4a54512b/w13_hw.py">程式碼</a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!--啟動Brython-->
<p>
<script>
-window.onload=function(){
brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
canvas = html.CANVAS(width=400,height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
ctx=canvas.getContext("2d")

ctx.fillStyle = 'green' # 綠色
ctx.beginPath()
ctx.rect(10,10,100,100,) # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'yellow'
ctx.beginPath()
ctx.rect(60,60,100,100) # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'blue'
ctx.beginPath()
ctx.rect(60,60,50,50) # 填充第二個正方形
ctx.fill()

# 繪製三角形
ctx.fillStyle = 'orange'
ctx.beginPath()
ctx.moveTo(10, 10) # 第一個頂點
ctx.lineTo(110, 110) # 第二個頂點
ctx.lineTo(110, 10) # 第三個頂點
ctx.closePath() # 封閉路徑
ctx.fill() # 填充三角形

# 繪製三角形
ctx.fillStyle = 'pink'
ctx.beginPath()
ctx.moveTo(60, 60) # 第一個頂點
ctx.lineTo(110, 60) # 第二個頂點
ctx.lineTo(110, 110) # 第三個頂點
ctx.closePath() # 封閉路徑
ctx.fill() # 填充三角形


ctx.lineWidth = 1
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(10,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(110,10)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(110,10)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(10,110)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,160)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(160,60)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,60)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(60,160)
ctx.stroke()</pre>
</div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc
canvas = html.CANVAS(width=400,height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx=canvas.getContext("2d")

ctx.fillStyle = 'green'  # 綠色
ctx.beginPath()
ctx.rect(10,10,100,100,)  # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'yellow' 
ctx.beginPath()
ctx.rect(60,60,100,100)  # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'blue'  
ctx.beginPath()
ctx.rect(60,60,50,50)  # 填充第二個正方形
ctx.fill()

# 繪製三角形
ctx.fillStyle = 'orange'
ctx.beginPath()
ctx.moveTo(10, 10)  # 第一個頂點
ctx.lineTo(110, 110)  # 第二個頂點
ctx.lineTo(110, 10)  # 第三個頂點
ctx.closePath()  # 封閉路徑
ctx.fill()  # 填充三角形

# 繪製三角形
ctx.fillStyle = 'pink'
ctx.beginPath()
ctx.moveTo(60, 60)  # 第一個頂點
ctx.lineTo(110, 60)  # 第二個頂點
ctx.lineTo(110, 110)  # 第三個頂點
ctx.closePath()  # 封閉路徑
ctx.fill()  # 填充三角形


ctx.lineWidth = 1
ctx.strokeStyle =  'blue'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(10,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(110,10)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(110,10)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(10,110)
ctx.lineTo(110,110)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,160)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(160,60)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,60)
ctx.stroke()
ctx.lineWidth = 1
ctx.strokeStyle =  'red'
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(60,160)
ctx.stroke()
</script>
</p>
<h3>w13_ai</h3>
<p><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/2f56a3304a70883ab25d6e2ea94173e9/raw/c21dba14315e648aa7696c35d03e4a30e020d85e/w13_ai.py">程式碼</a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!--啟動Brython-->
<p>
<script>
window.onload=function(){
    brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
# 初始化畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

# 第一個圓分成四個顏色
# 畫圓的四個扇形區域

# 第一個扇形 (藍色)
ctx.fillStyle = 'blue'
ctx.beginPath()
ctx.moveTo(200, 200) # 圓心
ctx.arc(200, 200, 141.4, 3.14/4, 3*3.14/4) # 第一個扇形，範圍 45 到 135 度
ctx.closePath()
ctx.fill()

# 第二個扇形 (紅色)
ctx.fillStyle = 'red'
ctx.beginPath()
ctx.moveTo(200, 200) # 圓心
ctx.arc(200, 200, 141.4, 3*3.14/4, 5*3.14/4) # 第二個扇形，範圍 135 到 225 度
ctx.closePath()
ctx.fill()

# 第三個扇形 (綠色)
ctx.fillStyle = 'green'
ctx.beginPath()
ctx.moveTo(200, 200) # 圓心
ctx.arc(200, 200, 141.4, 5*3.14/4, 7*3.14/4) # 第三個扇形，範圍 225 到 315 度
ctx.closePath()
ctx.fill()

# 第四個扇形 (黃色)
ctx.fillStyle = 'yellow'
ctx.beginPath()
ctx.moveTo(200, 200) # 圓心
ctx.arc(200, 200, 141.4, 7*3.14/4,3.14/4) # 第四個扇形，範圍 315 到 45 度
ctx.closePath()
ctx.fill()

# 第一個扇形 (藍色)
ctx.fillStyle = 'lightblue'
ctx.beginPath()
ctx.moveTo(300, 300) # 圓心
ctx.arc(300, 300, 141.4, 3.14/4, 3*3.14/4) # 第一個扇形，範圍 45 到 135 度
ctx.closePath()
ctx.fill()

# 第二個扇形
ctx.fillStyle = 'purple'
ctx.beginPath()
ctx.moveTo(300, 300) # 圓心
ctx.arc(300, 300, 141.4, 3*3.14/4, 5*3.14/4) # 第二個扇形，範圍 135 到 225 度
ctx.closePath()
ctx.fill()

# 第三個扇形
ctx.fillStyle = 'gray'
ctx.beginPath()
ctx.moveTo(300, 300) # 圓心
ctx.arc(300, 300, 141.4, 5*3.14/4, 7*3.14/4) # 第三個扇形，範圍 225 到 315 度
ctx.closePath()
ctx.fill()

# 第四個扇形
ctx.fillStyle = 'brown'
ctx.beginPath()
ctx.moveTo(300, 300) # 圓心
ctx.arc(300, 300, 141.4, 7*3.14/4,3.14/4) # 第四個扇形，範圍 315 到 45 度
ctx.closePath()
ctx.fill()

ctx.fillStyle = 'pink'
ctx.beginPath()
ctx.rect(100, 100, 200, 200) # 填充第一個正方形
ctx.fill()

ctx.fillStyle = 'lightgreen' # 綠色
ctx.beginPath()
ctx.rect(200, 200, 200, 200) # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'orange' # 橘色
ctx.beginPath()
ctx.rect(200, 200,100, 100) # 填充第二個正方形
ctx.fill()

# 畫線條
ctx.lineWidth = 3
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫正方形
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200) # 第一個正方形
ctx.rect(200, 200, 200, 200) # 第二個正方形
ctx.stroke()

# 畫圓
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14) # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14) # 第二個圓
ctx.stroke()</pre>
</div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 初始化畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 第一個圓分成四個顏色
# 畫圓的四個扇形區域

# 第一個扇形 (藍色)
ctx.fillStyle = 'blue'
ctx.beginPath()
ctx.moveTo(200, 200)  # 圓心
ctx.arc(200, 200, 141.4, 3.14/4, 3*3.14/4)  # 第一個扇形，範圍 45 到 135 度
ctx.closePath()
ctx.fill()

# 第二個扇形 (紅色)
ctx.fillStyle = 'red'
ctx.beginPath()
ctx.moveTo(200, 200)  # 圓心
ctx.arc(200, 200, 141.4, 3*3.14/4, 5*3.14/4)  # 第二個扇形，範圍 135 到 225 度
ctx.closePath()
ctx.fill()

# 第三個扇形 (綠色)
ctx.fillStyle = 'green'
ctx.beginPath()
ctx.moveTo(200, 200)  # 圓心
ctx.arc(200, 200, 141.4, 5*3.14/4, 7*3.14/4)  # 第三個扇形，範圍 225 到 315 度
ctx.closePath()
ctx.fill()

# 第四個扇形 (黃色)
ctx.fillStyle = 'yellow'
ctx.beginPath()
ctx.moveTo(200, 200)  # 圓心
ctx.arc(200, 200, 141.4, 7*3.14/4,3.14/4)  # 第四個扇形，範圍 315 到 45 度
ctx.closePath()
ctx.fill()

# 第一個扇形 (藍色)
ctx.fillStyle = 'lightblue'
ctx.beginPath()
ctx.moveTo(300, 300)  # 圓心
ctx.arc(300, 300, 141.4, 3.14/4, 3*3.14/4)  # 第一個扇形，範圍 45 到 135 度
ctx.closePath()
ctx.fill()

# 第二個扇形 
ctx.fillStyle = 'purple'
ctx.beginPath()
ctx.moveTo(300, 300)  # 圓心
ctx.arc(300, 300, 141.4, 3*3.14/4, 5*3.14/4)  # 第二個扇形，範圍 135 到 225 度
ctx.closePath()
ctx.fill()

# 第三個扇形 
ctx.fillStyle = 'gray'
ctx.beginPath()
ctx.moveTo(300, 300)  # 圓心
ctx.arc(300, 300, 141.4, 5*3.14/4, 7*3.14/4)  # 第三個扇形，範圍 225 到 315 度
ctx.closePath()
ctx.fill()

# 第四個扇形
ctx.fillStyle = 'brown'
ctx.beginPath()
ctx.moveTo(300, 300)  # 圓心
ctx.arc(300, 300, 141.4, 7*3.14/4,3.14/4)  # 第四個扇形，範圍 315 到 45 度
ctx.closePath()
ctx.fill()

ctx.fillStyle = 'pink' 
ctx.beginPath()
ctx.rect(100, 100, 200, 200) # 填充第一個正方形
ctx.fill()

ctx.fillStyle = 'lightgreen' # 綠色
ctx.beginPath()
ctx.rect(200, 200, 200, 200) # 填充第二個正方形
ctx.fill()

ctx.fillStyle = 'orange' # 橘色
ctx.beginPath()
ctx.rect(200, 200,100, 100) # 填充第二個正方形
ctx.fill()

# 畫線條
ctx.lineWidth = 3
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫正方形
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200) # 第一個正方形
ctx.rect(200, 200, 200, 200) # 第二個正方形
ctx.stroke()

# 畫圓
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14) # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14) # 第二個圓
ctx.stroke()
</script>
</p>
<h2>w14</h2>
<h2>w15</h2>
<p><span style="background-color: #caede0;">題目一:</span> 請利用 Gist 與 Brython 程式環境,  以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</p>
<p></p>
<p><span style="color: #000080;"><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/797106cff520a1e1743c479346b19e39/raw/302c1e3c3634daf682b6611937ecd4823b4a9ab7/w15-%25E9%25A1%258C%25E7%259B%25AE1.py" style="color: #000080;">從 1 累加到 100</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># sum 初始值設為 0
sum = 0
init = 1
upto = 100
# 利用 for 重複迴圈與變數加法進行累加
for i in range(init, upto+1):
sum = sum + i
print("從" + str(init) + "累加到" + str(upto) + "=" + str(sum))</pre>
<p><span style="color: #4c9c6c;"><strong>執行過程:</strong></span></p>
<ol>
<li>
<p>變數初始化：</p>
<ul style="list-style-type: disc;">
<li>設定變數 <code>sum</code> 的初始值為 <code>0</code>，用於存放累加的結果。</li>
<li>設定 init = 1 和 <code>upto = 100</code>，分別作為累加的起始值與結束值。</li>
</ul>
</li>
<li>
<p>for 迴圈執行：</p>
<ul style="list-style-type: disc;">
<li>使用 for i in range(init, upto+1)，範圍是從 <code>1</code> 到 <code>100</code>（包含 <code>100</code>）。</li>
<li>每次迴圈執行時，<code>i</code> 會依序取值 <code>1, 2, 3, ..., 100</code>。</li>
<li>每次將 <code>i</code> 的值加到 sum 上，更新 <code>sum</code> 的值。</li>
</ul>
</li>
<li>
<p>累加的過程：</p>
<ul style="list-style-type: disc;">
<li>第一次迴圈：sum<code> = 0 + 1 = 1</code></li>
<li>第二次迴圈：sum<code> = 1 + 2 = 3</code></li>
<li>第三次迴圈：sum<code> = 3 + 3 = 6</code></li>
<li>最後一次迴圈：sum<code> = 4950 + 100 = 5050</code></li>
</ul>
</li>
<li>
<p>結果輸出：</p>
<ul style="list-style-type: disc;">
<li>使用 <code>print</code> 輸出累加結果</li>
</ul>
</li>
</ol>
<p><span style="color: #4c9c6c;"><strong>A</strong><strong>ns:</strong></span></p>
<p>從 1 累加到 100的總合<span>是:</span>5050</p>
<p><span style="color: #4c9c6c;"><strong>心得:</strong></span></p>
<p><span style="color: #000000;">可熟悉變數的初始化與累加運算，和迴圈的運作。</span></p>
<p><span style="background-color: #caede0;">題目二:</span> 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. </p>
<p><span style="color: #000080;"><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/aa063dc03c68d30dc85131a48cdd5c59/raw/cea522ae334d122e8728b174b95ecb4615958aad/w15-%25E9%25A1%258C%25E7%259B%25AE2.py" style="color: #000080;">addto</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 addto 函式
def addto(start, end):
total = sum(range(start, end + 1)) # 使用 range() 函式生成範圍，並用 sum() 進行累加
return total

# 呼叫 addto 函式，並計算 1 到 100 的總和
result = addto(1, 100)

# 顯示結果
print(f"從 1 到 100 的總和是：{result}")</pre>
<p><span style="color: #4c9c6c;"><strong><span color="#71ad7d">執行過程:</span></strong></span></p>
<ol>
<li>
<p>定義函式：</p>
<ul style="list-style-type: disc;">
<li>使用 def addto(start, end) 定義一個函式，函式的參數為 <code>start</code> 和 <code>end</code>。</li>
<li>函式內部使用 range(start, end + 1) 產生從 start 到 end（包含 end）的數字範圍。</li>
<li>利用 sum() 函式將範圍內的數字累加，並將結果存入變數 <code>total</code>。</li>
<li>最後 <code>return</code> 累加結果。</li>
</ul>
</li>
<li>
<p>呼叫函式：</p>
<ul style="list-style-type: disc;">
<li>呼叫函式 a<code>ddto(1, 100)</code>。</li>
<li>函式執行時，會計算從 <code>1</code> 到 <code>100</code> 的總和，並將結果存入變數 result。</li>
</ul>
</li>
</ol>
<p><span style="color: #4c9c6c;"><strong>Ans:</strong></span></p>
<p><span>從 1 到 100 的總和是：5050</span></p>
<p><strong><span style="color: #4c9c6c;">心得:</span></strong></p>
<p><span style="color: #000000;">可了</span>解range中的start和end的運用，再結合addto計算出結果<span style="color: #000000;">。</span></p>
<p></p>
<p></p>
<p><span style="background-color: #caede0;">題目三:</span> 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. </p>
<p><span style="color: #000080;"><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/b30e2f70b1cfdd7488e68a8b1940427b/raw/b0626a4d7d82cb6c1a2f16a867abd1f78833d155/w15-%25E9%25A1%258C%25E7%259B%25AE3.py" style="color: #000080;">add_only_even</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    # 使用列表推導式篩選範圍內的偶數
    even_numbers = [num for num in range(start, end + 1) if num % 2 == 0]
    
    # 計算偶數的總和
    total = sum(even_numbers)
    
    return total

# 呼叫函式，計算從 1 到 100 的偶數總和
result = add_only_even(1, 100)

# 顯示結果
print(f"從 1 到 100 的偶數總和是：{result}")
</pre>
<p><span style="color: #4c9c6c;"><strong><span color="#71ad7d">執<span style="color: #4c9c6c;">行過程:</span></span></strong></span></p>
<ol>
<li>
<p>定義函式 add_only_even：</p>
<ul style="list-style-type: disc;">
<li>接受兩個參數：<code>start</code>和 <code>end。</code></li>
<li>使用列表推導式篩選範圍內的偶數：
<ul>
<li>range(start, end + 1) 會生成從 <code>start</code> 到 <code>end</code>（包含 <code>end</code>）的數字序列。</li>
<li> if num % 2 == 0 篩選偶數。</li>
</ul>
</li>
<li>使用 <code>sum()</code> 函數計算列表中所有偶數的總和：
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"> total = sum(even_numbers)</div>
</div>
</li>
<li>返回計算結果 total。</li>
</ul>
</li>
<li>
<p>呼叫函式 add_only_even(1, 100)：</p>
<ul style="list-style-type: disc;">
<li>將範圍設為從 1 到 100，函式會自動篩選 2、4、6、...、100 的偶數，並計算總和。</li>
</ul>
</li>
<li>
<p>顯示結果：</p>
<ul style="list-style-type: disc;">
<li>使用 <code>print()</code> 函式輸出偶數總和。</li>
</ul>
</li>
</ol>
<p><span style="color: #4c9c6c;"><strong>Ans:</strong></span></p>
<p><span>從 1 到 100 的偶數總和是：2550</span></p>
<p><span style="color: #4c9c6c;"><strong>心得:</strong></span></p>
<p>延伸第二題了解start和end<span>的運用在運用if num % 2 == 0  篩選出偶數後避開，再進行運算。</span></p>
<p></p>
<p><span style="background-color: #caede0;">題</span><span><span style="background-color: #caede0;">目四:</span> 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, </span></p>
<p><span style="color: #000080;"><a href="https://mdecp2024.github.io/hw-41323105/content/Brython.html?src=https://gist.githubusercontent.com/41323105/009d68c119d477c77a197d5ad5672519/raw/cda3520c645b5893749cb07a5722cf130134682c/w15-%25E9%25A1%258C%25E7%259B%25AE4.py" style="color: #000080;">add_avoid_8</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
# 初始化總和
total = 0

# 遍歷範圍內的每個數字
for num in range(start, end + 1):
# 檢查數字是否包含 '8'
if '8' not in str(num):
total += num # 如果不包含 '8'，則累加此數字

return total

# 呼叫函式，計算從 1 到 100，避開包含 '8' 的數字
result = add_avoid_8(1, 100)

# 顯示結果
print(f"從 1 到 100，避開包含 '8' 的數字的總和是：{result}")</pre>
<p><span style="color: #4c9c6c;"><strong><span color="#71ad7d">執行過程:</span></strong></span></p>
<p><span style="color: #4c9c6c;"><strong><span color="#71ad7d"></span></strong></span></p>
<ol>
<li>
<p>定義函式 add_avoid_8：</p>
<ul style="list-style-type: disc;">
<li>接受兩個參數：start和end。</li>
<li>初始化變數 total<code> = 0</code>，用於儲存範圍內避開包含數字 '8' 的總和。</li>
</ul>
</li>
<li>
<p>迴圈篩選數字：</p>
<ul style="list-style-type: disc;">
<li>使用 for num in range(start, end + 1) 遍歷從 start到end 的每個數字（包含 <code>end</code>）。</li>
<li>將數字轉換為字串，檢查字串中是否不包含字符 <code>'8'</code>：
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-python">if '8' not in str(num): </code></div>
</div>
</li>
<li>若條件成立（數字不包含 '8'），則將該數字加入總和：
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none">total += num</div>
</div>
</li>
</ul>
</li>
<li>
<p>返回結果：</p>
<ul style="list-style-type: disc;">
<li>迴圈結束後，返回累加的結果 total。</li>
</ul>
</li>
<li>
<p>呼叫函式：</p>
<ul style="list-style-type: disc;">
<li>設定範圍為從 1 到 100，呼叫函式 add_avoid_8(1, 100) 計算結果。</li>
</ul>
</li>
</ol>
<p></p>
<p></p>
<p><span style="color: #4c9c6c;"><strong>Ans:</strong></span></p>
<p><span>從 1 到 100，避開包含 '8' 的數字的總和是：3763</span><br/><br/></p>
<p><strong><span style="color: #4c9c6c;">心得:</span></strong></p>
<p><span style="color: #000000;">利用</span>if '8' not in str(num)用來檢查數字有無包含8的函數，再利用total += num計算該部包<span style="color: #000000;"><span style="color: #994949;"><span style="color: #000000;"><span>含8的倍數之總和。</span></span></span></span></p>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"><a href="https://mde.tw/cp2024/content/Brython.html">cp2024/content/Brython.html </a></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>